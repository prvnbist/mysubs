// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from '@xata.io/client'
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client'

const tables = [
	{
		name: 'payment_method',
		columns: [
			{
				name: 'id',
				type: 'string',
				notNull: true,
				unique: true,
				defaultValue: 'gen_random_uuid()',
			},
			{
				name: 'title',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'user_id',
				type: 'link',
				link: { table: 'user' },
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
			},
		],
	},
	{
		name: 'subscription',
		columns: [
			{
				name: 'amount',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'currency',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'email_alert',
				type: 'bool',
				notNull: false,
				unique: false,
				defaultValue: 'false',
			},
			{
				name: 'frequency',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '1',
			},
			{
				name: 'id',
				type: 'string',
				notNull: true,
				unique: true,
				defaultValue: 'gen_random_uuid()',
			},
			{
				name: 'interval',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: "'MONTH'::character varying",
			},
			{
				name: 'next_payment_date',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'payment_method_id',
				type: 'link',
				link: { table: 'payment_method' },
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'title',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'user_id',
				type: 'link',
				link: { table: 'user' },
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'website',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
			},
		],
	},
	{
		name: 'transaction',
		columns: [
			{
				name: 'amount',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'currency',
				type: 'text',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'id',
				type: 'string',
				notNull: true,
				unique: true,
				defaultValue: 'gen_random_uuid()',
			},
			{
				name: 'invoice_date',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'paid_date',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'payment_method_id',
				type: 'link',
				link: { table: 'payment_method' },
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'user_id',
				type: 'link',
				link: { table: 'user' },
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
			},
		],
	},
	{
		name: 'user',
		columns: [
			{
				name: 'auth_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: null,
			},
			{
				name: 'email',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: null,
			},
			{
				name: 'first_name',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'id',
				type: 'string',
				notNull: true,
				unique: true,
				defaultValue: 'gen_random_uuid()',
			},
			{
				name: 'last_name',
				type: 'text',
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: 'xata_createdat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_id',
				type: 'text',
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
			},
			{
				name: 'xata_updatedat',
				type: 'datetime',
				notNull: true,
				unique: false,
				defaultValue: 'now()',
			},
			{
				name: 'xata_version',
				type: 'int',
				notNull: true,
				unique: false,
				defaultValue: '0',
			},
		],
	},
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type PaymentMethod = InferredTypes['payment_method']
export type PaymentMethodRecord = PaymentMethod & XataRecord

export type Subscription = InferredTypes['subscription']
export type SubscriptionRecord = Subscription & XataRecord

export type Transaction = InferredTypes['transaction']
export type TransactionRecord = Transaction & XataRecord

export type User = InferredTypes['user']
export type UserRecord = User & XataRecord

export type DatabaseSchema = {
	payment_method: PaymentMethodRecord
	subscription: SubscriptionRecord
	transaction: TransactionRecord
	user: UserRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
	databaseURL: 'https://Praveen-Bisht-s-workspace-atlnm6.eu-west-1.xata.sh/db/my-subs',
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables)
	}
}

let instance: XataClient | undefined = undefined

export const getXataClient = () => {
	if (instance) return instance

	instance = new XataClient()
	return instance
}
